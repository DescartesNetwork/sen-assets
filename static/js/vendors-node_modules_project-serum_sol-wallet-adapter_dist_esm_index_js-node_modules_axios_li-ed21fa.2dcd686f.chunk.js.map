{"version":3,"file":"static/js/vendors-node_modules_project-serum_sol-wallet-adapter_dist_esm_index_js-node_modules_axios_li-ed21fa.2dcd686f.chunk.js","mappings":"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","sources":["../../../src/index.ts","../node_modules/axios/lib/axios.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js"],"sourcesContent":[null,"'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"],"names":["Wallet","EventEmitter","constructor","provider","_network","Map","e","_injectedProvider","source","window","origin","_providerUrl","_a","_popup","data","method","newPublicKey","PublicKey","params","publicKey","_publicKey","equals","handleDisconnect","_autoApprove","autoApprove","emit","result","error","promises","_responsePromises","get","id","resolve","reject","Error","disconnect","a","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","_handlerAdded","addEventListener","handleMessage","_beforeUnload","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","_nextRequestId","set","jsonrpc","_b","_c","_d","focus","connect","close","sign","display","Uint8Array","response","signature","bs58","signTransaction","transaction","message","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","utils","require","bind","Axios","mergeConfig","axios","createInstance","defaultConfig","context","instance","prototype","request","extend","create","instanceConfig","Cancel","CancelToken","isCancel","VERSION","all","spread","isAxiosError","module","exports","r","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","i","j","z","xc","yc","k","l","b","n","String","str","len","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","x","v","intCheck","round","isNum","alphabet","caseChanged","arrL","arr","carry","klo","khi","temp","xlo","m","xhi","cmp","c0","ne","toExponential","toFixedPoint","c","pows10","out","rd","ni","d","rm","sd","obj","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","args","sum","convertBase","y","baseOut","div","yL","yz","qc","q","base","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","this","nIsBig","length","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","t","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","slice","coeffToString","rep","format","toFixed","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","default","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","bytes","binarySuffixes","decimalSuffixes","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","Math","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","state","currentCurrency","clonedFormat","Object","assign","options","space","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","value","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","precision","indexOf","_result$split2","split","_slicedToArray","_base$split2","_base$split2$","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","index","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","match","hasTrailingZeroes","_result$toString$spli5","replace","missingZeros","defaultFormat","keys","_key","arguments","apply","concat","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","string","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","console","_subtract","other","otherValue","isNumbro","minus","toNumber","add","plus","multiply","times","divide","dividedBy","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","input","normalizeInput","unformat","isNaN","NaN","version","object","language","defaultCurrencyFormat","validate","allSuffixes","key","factor","escapeRegExp","unformatValue","inputString","o","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","type","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","JSON","stringify","push","_toConsumableArray","reduce","acc","current","validInput","isFormatValid"],"sourceRoot":""}