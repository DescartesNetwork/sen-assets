{"version":3,"file":"static/js/373.b386ace0.chunk.js","mappings":"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","sources":["app/lib/wormhole/constant/ethConfig.ts","app/lib/wormhole/context.ts","app/lib/wormhole/helper/utils.ts","app/lib/wormhole/provider.ts","app/lib/wormhole/wohEthSol.ts","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts"],"sourcesContent":["export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const AVERAGE_BLOCK_PER_DAY = 6371\nexport const MAX_QUERIRED_DAYS = 30\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_PROJECT_ID: String = '5eb1b92f2065414d9dd21858fac54257'\nexport const INFURA_SECRET_KEY: String = 'ff3fa1218f644c85a7374e40014374f1'\n\nexport const INFURA_PROJECT_ID_FOR_ETHERS: String =\n  'c1ef76acebf44e5cbada1ae17be73e2b'\nexport const INFURA_SECRET_KEY_FOR_ETHERS: String =\n  'b7028ecb8307456ba2e7a32281620a85'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_PROJECT_ID}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_PROJECT_ID}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_PROJECT_ID}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_PROJECT_ID}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_PROJECT_ID}`,\n}\n\nexport const WETH_ADDRESS: EthAddressConfig = {\n  mainnet: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  goerli: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n  ropsten: '0xc778417e063141139fce010982780140aa0cd5ab',\n}\n\nexport const ETH_ADDRESS: EthAddressConfig = {\n  mainnet: '0x0000000000000000000000000000000000000000',\n  goerli: '0x0000000000000000000000000000000000000000',\n  ropsten: '0x0000000000000000000000000000000000000000',\n}\n\nexport const MAINNET_ETHER_ADDRESS_PREFIX = '0x1'\nexport const GOERLI_ETHER_ADDRESS_PREFIX = '0x5'\n","import { CHAIN_ID_ETH, CHAIN_ID_SOLANA } from '@certusone/wormhole-sdk'\n\nimport { WohTokenInfo, WormholeContext } from 'app/constant/types/wormhole'\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from './constant/ethConfig'\nimport {\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from './constant/solConfig'\nimport { WORMHOLE_RPC_HOST } from './constant/wormhole'\nimport { getEtherNetwork } from './helper/utils'\nimport { net } from 'shared/runtime'\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork = net\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const createEtherSolContext = (\n  tokenInfo: WohTokenInfo,\n): WormholeContext => {\n  const solNetWork = net\n  const etherContext = getEtherContext()\n  return {\n    id: new Date().getTime() + '' + Math.random(),\n    time: new Date().getTime(),\n    // Source network\n    srcChainId: etherContext.chainId,\n    srcTokenBridgeAddress: etherContext.tokenBridgeAddress,\n    srcBridgeAddress: etherContext.bridgeAddress,\n    // Sol network\n    targetChainId: CHAIN_ID_SOLANA,\n    targetTokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    targetBridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n    // Wormhole\n    wormholeRpc: WORMHOLE_RPC_HOST[solNetWork],\n    // Token\n    tokenInfo: tokenInfo,\n  }\n}\n\nexport const createSolEtherContext = (\n  tokenInfo: WohTokenInfo,\n): WormholeContext => {\n  const solNetWork = net\n  const solContext = getSolContext()\n  const { chainId, tokenBridgeAddress, bridgeAddress } = getEtherContext()\n\n  return {\n    id: new Date().getTime() + '' + Math.random(),\n    time: new Date().getTime(),\n    // Source network\n    srcChainId: solContext.chainId,\n    srcTokenBridgeAddress: solContext.tokenBridgeAddress,\n    srcBridgeAddress: solContext.bridgeAddress,\n    // Eth network\n    targetChainId: chainId,\n    targetTokenBridgeAddress: tokenBridgeAddress,\n    targetBridgeAddress: bridgeAddress,\n    // Wormhole\n    wormholeRpc: WORMHOLE_RPC_HOST[solNetWork],\n    // Token\n    tokenInfo: tokenInfo,\n  }\n}\n","import { Connection, Transaction } from '@solana/web3.js'\nimport {\n  getSignedVAA,\n  getEmitterAddressEth,\n  getIsTransferCompletedSolana,\n} from '@certusone/wormhole-sdk'\n\nimport { account, WalletInterface } from '@senswap/sen-js'\nimport {\n  StepTransfer,\n  WormholeContext,\n  WormholeStoreKey,\n} from 'app/constant/types/wormhole'\nimport WohEthSol from '../wohEthSol'\nimport PDB from 'shared/pdb'\nimport { net } from 'shared/runtime'\n\nexport const getEtherNetwork = () => {\n  const solNetwork = net\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getNextStep = async (\n  txHash: string,\n  context: WormholeContext,\n  sequence: string,\n): Promise<StepTransfer> => {\n  const listTransferState = await WohEthSol.fetchAll()\n\n  for (let item of Object.values(listTransferState)) {\n    if (txHash === item.transferData.txHash) {\n      return item.transferData.nextStep\n    }\n  }\n\n  const { vaaBytes } = await getSignedVAA(\n    context.wormholeRpc,\n    context.srcChainId,\n    getEmitterAddressEth(context.srcTokenBridgeAddress),\n    sequence,\n  )\n\n  const isRedeemed = await getIsTransferCompletedSolana(\n    context.targetTokenBridgeAddress,\n    vaaBytes,\n    window.sentre.splt.connection,\n  )\n  return isRedeemed ? StepTransfer.Finish : StepTransfer.WaitSigned\n}\n\nexport const sendTransaction = async (\n  transaction: Transaction,\n  connection: Connection,\n): Promise<string> => {\n  const tx = transaction.serialize()\n  const txId = await connection.sendRawTransaction(tx, {\n    skipPreflight: true,\n    preflightCommitment: 'confirmed',\n  })\n  const {\n    value: { err },\n  } = await connection.confirmTransaction(txId, 'confirmed')\n  if (err) throw new Error(`${err} at ${txId}`)\n  return txId\n}\n\nexport const getAssociatedAddress = async (\n  mintAddress: string,\n  wallet: WalletInterface,\n) => {\n  if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n  const walletAddress = await wallet.getAddress()\n  const splt = window.sentre.splt\n\n  const targetAddress = await splt.deriveAssociatedAddress(\n    walletAddress,\n    mintAddress,\n  )\n  let initialized = false\n  try {\n    const { state } = await splt.getAccountData(targetAddress)\n    initialized = state > 0 ? true : false\n  } catch (er) {\n    initialized = false\n  }\n  if (!initialized)\n    await splt.initializeAccount(mintAddress, walletAddress, wallet)\n  return targetAddress\n}\n\nexport const getWormholeDb = async <T>(key: WormholeStoreKey) => {\n  const address = await window.sentre.wallet?.getAddress()\n  if (!address) throw new Error('Wallet is not connected')\n  const db = new PDB(address).createInstance('wormhole')\n  const data = db.getItem<T>(key)\n  return data\n}\nexport const setWormholeDb = async (key: WormholeStoreKey, data: any) => {\n  const address = await window.sentre.wallet?.getAddress()\n  if (!address) throw new Error('Wallet is not connected')\n  const db = new PDB(address).createInstance('wormhole')\n  return db.setItem(key, data)\n}\n\nexport const clearWormholeDb = async () => {\n  const address = await window.sentre.wallet?.getAddress()\n  if (!address) throw new Error('Wallet is not connected')\n  const db = new PDB(address).dropInstance('wormhole')\n  return db\n}\n","import { ChainId, getSignedVAA } from '@certusone/wormhole-sdk'\nimport { Connection } from '@solana/web3.js'\nimport {\n  AttestData,\n  StepTransfer,\n  TransferData,\n  TransferState,\n  WormholeContext,\n  WormholeStoreKey,\n} from 'app/constant/types/wormhole'\nimport { asyncWait } from 'shared/util'\n\nimport { getWormholeDb, setWormholeDb } from './helper/utils'\n\nexport class WormholeProvider {\n  protected context: WormholeContext | undefined\n  protected transferData: TransferData | undefined\n  protected attestData: AttestData | undefined\n\n  static fetchAll = async (): Promise<Record<string, TransferState>> => {\n    const data = await getWormholeDb<Record<string, TransferState>>(\n      WormholeStoreKey.Transfer,\n    )\n    return JSON.parse(JSON.stringify(data)) || {}\n  }\n\n  private getContext = () => {\n    if (!this.context) throw new Error('Invalid context')\n    return this.context\n  }\n\n  restore = async (stateBackup: TransferState) => {\n    const stateClone = JSON.parse(JSON.stringify(stateBackup))\n    if (!stateBackup) throw new Error('Not find state transfer')\n    this.transferData = stateClone.transferData\n    this.attestData = stateClone.attestData\n    this.context = stateClone.context\n  }\n\n  /**\n   * Transfer: to bridge tokens from origin chain to destination chain\n   * The token must be attested beforehand\n   * @param amount\n   * @returns\n   */\n  transfer = async (\n    amount: string,\n    onUpdate: (state: TransferState) => void,\n  ) => {\n    const context = this.getContext()\n    // init data transfer\n    if (!this.transferData)\n      this.transferData = await this.initTransferData(amount)\n    const { transferData } = this.getState()\n    const { attested } = await this.isAttested()\n    if (!attested) await this.attest(onUpdate)\n\n    if (transferData.nextStep === StepTransfer.Transfer) {\n      const { emitterAddress, sequence, txHash } = await this.submitTransfer()\n      context.id = txHash\n      transferData.txHash = txHash\n      transferData.emitterAddress = emitterAddress\n      transferData.sequence = sequence\n      transferData.nextStep = StepTransfer.WaitSigned\n      const newState = await this.backup()\n      await onUpdate(newState)\n    }\n    if (transferData.nextStep === StepTransfer.WaitSigned) {\n      const vaaHex = await this.getSignedVAA(\n        transferData.emitterAddress,\n        transferData.sequence,\n      )\n      transferData.vaaHex = vaaHex\n      transferData.nextStep = StepTransfer.Redeem\n      const newState = await this.backup()\n      await onUpdate(newState)\n    }\n    if (transferData.nextStep === StepTransfer.Redeem) {\n      const newTxId = await this.redeem(transferData.vaaHex)\n      transferData.txId = newTxId\n      transferData.nextStep = StepTransfer.Finish\n      const newState = await this.backup()\n      await onUpdate(newState)\n      return newTxId\n    }\n    throw new Error('Invalid step transfer')\n  }\n\n  protected getConnection() {\n    const nodeUrl = window.sentre.splt.nodeUrl\n    return new Connection(nodeUrl, 'confirmed')\n  }\n\n  protected backup = async () => {\n    const database = await WormholeProvider.fetchAll()\n    const state = this.getState()\n    database[state.context.id] = state\n    setWormholeDb(WormholeStoreKey.Transfer, database)\n    return state\n  }\n\n  protected getState = (): TransferState => {\n    if (!this.transferData) throw new Error('Invalid data transfer')\n    if (!this.context) throw new Error('Invalid context')\n    return {\n      transferData: this.transferData,\n      context: this.context,\n      attestData: this.attestData,\n    }\n  }\n\n  protected getSignedVAAWithRetry = async (\n    ...args: Parameters<typeof getSignedVAA>\n  ) => {\n    let attempts = 0\n    while (true) {\n      try {\n        console.log('Retry to get signed vaa:', ++attempts)\n        const re = await getSignedVAA(...args)\n        return re\n      } catch (er) {\n        // Nothing\n        await asyncWait(10000)\n      }\n    }\n  }\n\n  protected initTransferData = async (\n    amount: string,\n  ): Promise<TransferData> => {\n    throw new Error('Invalid function initTransferData')\n  }\n\n  protected isAttested = async (): Promise<{\n    attested: boolean\n    wrappedMintAddress: string | null\n    chainId?: ChainId\n  }> => {\n    throw new Error('Invalid function isAttested')\n  }\n\n  protected submitTransfer = async (): Promise<{\n    sequence: string\n    emitterAddress: string\n    txHash: string\n  }> => {\n    throw new Error('Invalid function submitTransfer')\n  }\n\n  protected submitAttest = async (): Promise<{\n    sequence: string\n    emitterAddress: string\n  }> => {\n    throw new Error('Invalid function submitAttest')\n  }\n\n  protected wrapToken = async (vaaHex: string): Promise<string> => {\n    throw new Error('Invalid function wrapToken')\n  }\n\n  protected redeem = async (vaaHex: string): Promise<string> => {\n    throw new Error('Invalid function redeem')\n  }\n\n  private initAttestData = (): AttestData => {\n    if (!this.attestData)\n      this.attestData = {\n        step: 0,\n        sequence: '',\n        emitterAddress: '',\n        vaaHex: '',\n        txId: '',\n      }\n    return this.attestData\n  }\n\n  private attest = async (onUpdate: (state: TransferState) => void) => {\n    const attestData = this.initAttestData()\n    if (attestData.step === 0) {\n      const { emitterAddress, sequence } = await this.submitAttest()\n      attestData.emitterAddress = emitterAddress\n      attestData.sequence = sequence\n      attestData.step++\n      const newState = await this.backup()\n      await onUpdate(newState)\n    }\n    if (attestData.step === 1) {\n      const vaaHex = await this.getSignedVAA(\n        attestData.emitterAddress,\n        attestData.sequence,\n      )\n      attestData.vaaHex = vaaHex\n      attestData.step++\n      const newState = await this.backup()\n      await onUpdate(newState)\n    }\n    if (attestData.step === 2) {\n      const txId = await this.wrapToken(attestData.vaaHex)\n      attestData.txId = txId\n      attestData.step++\n      const newState = await this.backup()\n      await onUpdate(newState)\n      return txId\n    }\n    throw new Error('Invalid step attest')\n  }\n\n  private async getSignedVAA(emitterAddress: string, sequence: string) {\n    const { context } = this.getState()\n    // Get signedVAA\n    const { vaaBytes } = await this.getSignedVAAWithRetry(\n      context.wormholeRpc,\n      context.srcChainId,\n      emitterAddress,\n      sequence,\n    )\n    const vaaHex = Buffer.from(vaaBytes).toString('hex')\n    return vaaHex\n  }\n}\n","import {\n  approveEth,\n  attestFromEth,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n  createWrappedOnSolana,\n  getEmitterAddressEth,\n  getForeignAssetSolana,\n  getOriginalAssetEth,\n  hexToUint8Array,\n  parseSequenceFromLogEth,\n  postVaaSolana,\n  redeemOnSolana,\n  transferFromEth,\n  transferFromEthNative,\n} from '@certusone/wormhole-sdk'\nimport { account, utils, WalletInterface } from '@senswap/sen-js'\n\nimport {\n  getAssociatedAddress,\n  getEtherNetwork,\n  sendTransaction,\n} from './helper/utils'\nimport { WormholeProvider } from './provider'\nimport { IEtherWallet } from '../etherWallet/walletInterface'\nimport {\n  StepTransfer,\n  WohTokenInfo,\n  TransferData,\n} from 'app/constant/types/wormhole'\nimport { createEtherSolContext } from './context'\nimport { ETH_ADDRESS, WETH_ADDRESS } from './constant/ethConfig'\n\nclass WohEthSol extends WormholeProvider {\n  private srcWallet: IEtherWallet\n  private targetWallet: WalletInterface\n  constructor(\n    sourceWallet: IEtherWallet,\n    targetWallet: WalletInterface,\n    tokenInfo: WohTokenInfo,\n  ) {\n    super()\n    this.srcWallet = sourceWallet\n    this.targetWallet = targetWallet\n    const cloneTokenInfo: WohTokenInfo = JSON.parse(JSON.stringify(tokenInfo))\n    this.context = createEtherSolContext(cloneTokenInfo)\n  }\n\n  private isNative = () => {\n    return this.context?.tokenInfo.address === ETH_ADDRESS[getEtherNetwork()]\n  }\n\n  protected isAttested = async (): Promise<{\n    attested: boolean\n    wrappedMintAddress: string | null\n  }> => {\n    const { context } = this.getState()\n    const provider = await this.srcWallet.getProvider()\n    const etherNetwork = getEtherNetwork()\n\n    let tokenAddressChecking: string = context.tokenInfo.address\n    // Currently, haven't found ETH_ADDRESS yet, so WETH_ADDRESS is used here\n    if (tokenAddressChecking === ETH_ADDRESS[etherNetwork])\n      tokenAddressChecking = WETH_ADDRESS[etherNetwork]\n\n    const originAsset = await getOriginalAssetEth(\n      context.srcTokenBridgeAddress,\n      provider,\n      tokenAddressChecking,\n      CHAIN_ID_ETH,\n    )\n\n    const wrappedMintAddress = await getForeignAssetSolana(\n      this.getConnection(),\n      context.targetTokenBridgeAddress,\n      originAsset.chainId,\n      originAsset.assetAddress,\n    )\n\n    return {\n      attested: !!wrappedMintAddress,\n      wrappedMintAddress,\n    }\n  }\n\n  protected initTransferData = async (amount: string) => {\n    const srcAddr = await this.srcWallet.getAddress()\n    const targetAddr = await this.targetWallet.getAddress()\n    const data: TransferData = {\n      nextStep: StepTransfer.Transfer,\n      amount: amount,\n      from: srcAddr,\n      to: targetAddr,\n      emitterAddress: '',\n      sequence: '',\n      vaaHex: '',\n      txId: '',\n      txHash: '',\n    }\n    return data\n  }\n\n  protected submitTransfer = async () => {\n    const { transferData, context } = this.getState()\n    let { wrappedMintAddress } = await this.isAttested()\n    if (!wrappedMintAddress) throw new Error('Attest the token first')\n\n    // get provider\n    const provider = await this.srcWallet.getProvider()\n    const signer = provider.getSigner()\n    const amountTransfer = utils.decimalize(\n      transferData.amount,\n      context.tokenInfo.decimals,\n    )\n\n    await approveEth(\n      context.srcTokenBridgeAddress,\n      context.tokenInfo.address,\n      signer,\n      amountTransfer,\n    )\n    const dstAddress = await getAssociatedAddress(\n      wrappedMintAddress,\n      this.targetWallet,\n    )\n\n    const transferReceipt = this.isNative()\n      ? await transferFromEthNative(\n          context.srcTokenBridgeAddress,\n          signer,\n          amountTransfer,\n          CHAIN_ID_SOLANA,\n          account.fromAddress(dstAddress).toBuffer(),\n        )\n      : await transferFromEth(\n          context.srcTokenBridgeAddress,\n          signer,\n          context.tokenInfo.address,\n          amountTransfer,\n          CHAIN_ID_SOLANA,\n          account.fromAddress(dstAddress).toBuffer(),\n        )\n    const sequence = parseSequenceFromLogEth(\n      transferReceipt,\n      context.srcBridgeAddress,\n    )\n    const emitterAddress = getEmitterAddressEth(context.srcTokenBridgeAddress)\n    return {\n      sequence,\n      emitterAddress,\n      txHash: transferReceipt.transactionHash,\n    }\n  }\n\n  protected submitAttest = async () => {\n    const { context } = this.getState()\n    const provider = await this.srcWallet.getProvider()\n    const signer = provider.getSigner()\n\n    // Send attest\n    const receipt = await attestFromEth(\n      context.srcTokenBridgeAddress,\n      signer,\n      context.tokenInfo.address,\n    )\n    // Fetch attention info\n    const sequence = parseSequenceFromLogEth(receipt, context.srcBridgeAddress)\n    const emitterAddress = getEmitterAddressEth(context.srcTokenBridgeAddress)\n    return { sequence, emitterAddress }\n  }\n\n  protected wrapToken = async (vaaHex: string) => {\n    const { context } = this.getState()\n    const payerAddress = await this.targetWallet.getAddress()\n    const vaaBytes = hexToUint8Array(vaaHex)\n\n    await postVaaSolana(\n      this.getConnection(),\n      this.targetWallet.signTransaction,\n      context.targetBridgeAddress,\n      payerAddress,\n      Buffer.from(vaaBytes),\n    )\n    const tx = await createWrappedOnSolana(\n      this.getConnection(),\n      context.targetBridgeAddress,\n      context.targetTokenBridgeAddress,\n      payerAddress,\n      vaaBytes,\n    )\n    const signedTx = await this.targetWallet.signTransaction(tx)\n    const txId = await sendTransaction(signedTx, this.getConnection())\n    return txId\n  }\n\n  protected redeem = async (vaaHex: string) => {\n    const { context } = this.getState()\n    const payerAddress = await this.targetWallet.getAddress()\n    const vaaBytes = hexToUint8Array(vaaHex)\n\n    await postVaaSolana(\n      this.getConnection(),\n      this.targetWallet.signTransaction,\n      context.targetBridgeAddress,\n      payerAddress,\n      Buffer.from(vaaBytes),\n    )\n    const tx = await redeemOnSolana(\n      this.getConnection(),\n      context.targetBridgeAddress,\n      context.targetTokenBridgeAddress,\n      payerAddress,\n      vaaBytes,\n    )\n    const signedTx = await this.targetWallet.signTransaction(tx)\n    const txId = await sendTransaction(signedTx, this.getConnection())\n    return txId\n  }\n}\n\nexport default WohEthSol\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconsole.log('Debug OS Isolation:', process.env.REACT_APP_ID)\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    const fuzzy = keyword + '~1'\n    engine.search(fuzzy).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n"],"names":["ETH_BRIDGE_ADDRESS","mainnet","goerli","ropsten","ETH_TOKEN_BRIDGE_ADDRESS","CHAIN_ID_ETH","MORALIS_INFO","url","apiKey","INFURA_PROJECT_ID","INFURA_PROJECT_ID_FOR_ETHERS","INFURA_SECRET_KEY_FOR_ETHERS","INFURA_API_HTTP_URL","INFURA_API_WSS_URL","WETH_ADDRESS","ETH_ADDRESS","MAINNET_ETHER_ADDRESS_PREFIX","GOERLI_ETHER_ADDRESS_PREFIX","getEtherContext","etherNetwork","getEtherNetwork","chainId","tokenBridgeAddress","bridgeAddress","createEtherSolContext","tokenInfo","solNetWork","net","etherContext","id","Date","getTime","Math","random","time","srcChainId","srcTokenBridgeAddress","srcBridgeAddress","targetChainId","CHAIN_ID_SOLANA","targetTokenBridgeAddress","SOL_TOKEN_BRIDGE_ADDRESS","targetBridgeAddress","SOL_BRIDGE_ADDRESS","wormholeRpc","WORMHOLE_RPC_HOST","createSolEtherContext","solContext","getSolContext","sendTransaction","async","transaction","connection","tx","serialize","txId","sendRawTransaction","skipPreflight","preflightCommitment","value","err","confirmTransaction","Error","getAssociatedAddress","mintAddress","wallet","account","walletAddress","getAddress","splt","window","sentre","targetAddress","deriveAssociatedAddress","initialized","state","getAccountData","er","initializeAccount","getWormholeDb","address","PDB","createInstance","getItem","key","setWormholeDb","data","setItem","WormholeProvider","context","transferData","attestData","getContext","this","restore","stateClone","JSON","parse","stringify","stateBackup","transfer","amount","onUpdate","initTransferData","getState","attested","isAttested","attest","nextStep","StepTransfer","emitterAddress","sequence","txHash","submitTransfer","newState","backup","vaaHex","getSignedVAA","newTxId","redeem","database","fetchAll","WormholeStoreKey","getSignedVAAWithRetry","attempts","console","log","asyncWait","submitAttest","wrapToken","initAttestData","step","getConnection","nodeUrl","Connection","vaaBytes","Buffer","from","toString","WohEthSol","constructor","sourceWallet","targetWallet","super","srcWallet","isNative","provider","getProvider","tokenAddressChecking","originAsset","getOriginalAssetEth","wrappedMintAddress","getForeignAssetSolana","assetAddress","srcAddr","targetAddr","to","signer","getSigner","amountTransfer","utils","decimals","approveEth","dstAddress","transferReceipt","transferFromEthNative","toBuffer","transferFromEth","parseSequenceFromLogEth","getEmitterAddressEth","transactionHash","receipt","attestFromEth","payerAddress","hexToUint8Array","postVaaSolana","signTransaction","createWrappedOnSolana","signedTx","redeemOnSolana","cloneTokenInfo","sol","symbol","name","extensions","coingeckoId","logoURI","sntr","process","tokenMap","engine","cluster","loading","queue","_init","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","forEach","token","set","lunr","ref","field","doc","add","length","shift","all","Array","values","findByAddress","get","addr","find","keyword","limit","tokens","fuzzy","search","findIndex","slice","Map","undefined"],"sourceRoot":""}